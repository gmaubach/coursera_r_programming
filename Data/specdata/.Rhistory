"complete.R"))
corr <- function(directory, threshold = 0)
{
complete_cases <- complete(directory)
complete_cases_with_threshold <- complete_cases[
complete_cases[["nobs"]] > threshold ,]
saved_workdir <- getwd()
setwd(directory)
corr_results <- numeric()
for (id in complete_cases_with_threshold$id)
{
dataset <- read.csv(
file = paste0(sprintf("%03d", id), ".csv"),
header = TRUE
)
result <- cor(x = dataset$sulfate, y = dataset$nitrate)
corr_results <- c(corr_results, result)
}
setwd(saved_workdir)
return(corr_results)
}
test <- corr(directory = "C:/Users/maubach.WEIN_WOLF/Desktop/temp/Documents/datasciencecoursera/Data/specdata", threshold = 500)
test
test <- corr(directory = "C:/Users/maubach.WEIN_WOLF/Desktop/temp/Documents/datasciencecoursera/Data/specdata", threshold = 0)
sum(is.na(test))
# datasciencecoursera
# Course: Programming with R
# Week 2: Programming Assignemnt
# Part 3
# Write a function that takes a directory of data files and
# a threshold for complete cases and calculates the
# correlation between sulfate and nitrate for monitor
# locations where the number of completely observed cases
# (on all variables) is greater than the threshold. The
# function should return a vector of correlations for the
# monitors that meet the threshold requirement. If no
# monitors meet the threshold requirement, then the function
# should return a numeric vector of length 0. A prototype of
# this function follows
# corr <- function(directory,
#                 threshold = 0) {
#   # 'directory' is a character vector of length 1 indicating
#   # the location of the csv files.
#   #
#   # 'threshold' is a numeric vector of length 1 indicating
#   # the number of completely observed observations (on all
#   # variables) required to compute the correlation between
#   # nitrate and sulfate; the default is 0.
#   #
#   # Return a numeric vector of correlations.
#   #
#   # Note: Do not round the result!
# }
#
# Please read '?cor' as this function is needed to fulfil
# this programming assignment.
source(file.path("C:/Users/maubach.WEIN_WOLF/Desktop",
"temp/Documents/datasciencecoursera",
"Programs",
"complete.R"))
corr <- function(directory, threshold = 0)
{
complete_cases <- complete(directory)
complete_cases_with_threshold <- complete_cases[
complete_cases[["nobs"]] > threshold ,]
saved_workdir <- getwd()
setwd(directory)
corr_results <- numeric()
for (id in complete_cases_with_threshold$id)
{
dataset <- read.csv(
file = paste0(sprintf("%03d", id), ".csv"),
header = TRUE
)
result <- cor(x = dataset$sulfate, y = dataset$nitrate)
print(result)
corr_results <- c(corr_results, result)
}
setwd(saved_workdir)
return(corr_results)
}
test <- corr(directory = "C:/Users/maubach.WEIN_WOLF/Desktop/temp/Documents/datasciencecoursera/Data/specdata", threshold = 500)
?cor
# datasciencecoursera
# Course: Programming with R
# Week 2: Programming Assignemnt
# Part 3
# Write a function that takes a directory of data files and
# a threshold for complete cases and calculates the
# correlation between sulfate and nitrate for monitor
# locations where the number of completely observed cases
# (on all variables) is greater than the threshold. The
# function should return a vector of correlations for the
# monitors that meet the threshold requirement. If no
# monitors meet the threshold requirement, then the function
# should return a numeric vector of length 0. A prototype of
# this function follows
# corr <- function(directory,
#                 threshold = 0) {
#   # 'directory' is a character vector of length 1 indicating
#   # the location of the csv files.
#   #
#   # 'threshold' is a numeric vector of length 1 indicating
#   # the number of completely observed observations (on all
#   # variables) required to compute the correlation between
#   # nitrate and sulfate; the default is 0.
#   #
#   # Return a numeric vector of correlations.
#   #
#   # Note: Do not round the result!
# }
#
# Please read '?cor' as this function is needed to fulfil
# this programming assignment.
source(file.path("C:/Users/maubach.WEIN_WOLF/Desktop",
"temp/Documents/datasciencecoursera",
"Programs",
"complete.R"))
corr <- function(directory, threshold = 0)
{
complete_cases <- complete(directory)
complete_cases_with_threshold <- complete_cases[
complete_cases[["nobs"]] > threshold ,]
saved_workdir <- getwd()
setwd(directory)
corr_results <- numeric()
for (id in complete_cases_with_threshold$id)
{
dataset <- read.csv(
file = paste0(sprintf("%03d", id), ".csv"),
header = TRUE
)
result <- cor(x = dataset$sulfate,
y = dataset$nitrate,
use = "pairwise.complete.obs")
print(result)
corr_results <- c(corr_results, result)
}
setwd(saved_workdir)
return(corr_results)
}
test <- corr(directory = "C:/Users/maubach.WEIN_WOLF/Desktop/temp/Documents/datasciencecoursera/Data/specdata", threshold = 500)
?complete.cases
tracingState()
?trace
# datasciencecoursera
# Course: Programming with R
# Week 2: Programming Assignemnt
# Part 1
# Write a function named 'pollutantmean' that calculates
# the mean of a pollutant (sulfate or nitrate) across a
# specified list of monitors. The function 'pollutantmean'
# takes three arguments:'directory', 'pollutant', and 'id'.
# Given a vector monitor ID numbers, 'pollutantmean' reads
# that monitors' particulate matter data from the directory
# specified in the 'directory' argument and returns the mean
# of the pollutant across all of the monitors, ignoring any
# missing values coded as NA. A prototype of the function is
# as follows:
#
# pollutantmean <- function(directory,
#                           pollutant,
#                           id = 1:332) {
#   # 'directory' is a character vector of length 1 indicating
#   # the location of the csv files.
#
#   # 'pollutant' is a character vector of length 1 indicating
#   # the name of the pollutant for which we will calculate
#   # the mean; either 'sulfate' or 'nitrate'.
#
#   # 'id' is an integer vector indicating the monitor ID
#   # numbers to be used.
#
#   # Return the mean of the pollutant across all monitors
#   # list in the 'ID' vector (ignoring NA values).
#   # Note: Do not round the result!
#
#
# }
work_dir <- "C:/Users/maubach.WEIN_WOLF/Desktop/temp/Documents/datasciencecoursera/Data/specdata"
t_create_file_list <- function(directory,
pattern = ".csv") {
saved_workdir <- getwd()
setwd(directory)
file_list <- list.files(pattern = pattern)
file_list <- file.path(directory,
file_list)
setwd(saved_workdir)
invisible(file_list)
}
t_get_textfile_header_list <- function(file_list,
header_row = 1,
...) {
# If you do not get the expected results, check your
# input data and hand-over more parameters to the
# read.table() function using the "..." operator to handle
# the data properly, e. g. sep = ",".
# Create header list from text files
header_list <- lapply(
file_list,
read.table,
header = FALSE,
skip = header_row - 1,
nrows = 1,
stringsAsFactors = FALSE,
...
)
# Create empty dataset with
# nrows = length of file list
# ncols = length of all found headers in each file
temp <- matrix(nrow = length(file_list),
ncol = length(unique(unlist(header_list))))
rownames(temp) <- basename(file_list)
colnames(temp) <- unique(unlist(header_list))
header_dataset <- as.data.frame(temp)
# Flag the headers found in each file with TRUE.
# Keep NA if a header was not found in the file.
for (row in 1:length(header_list)) {
for (header in as.character(header_list[[row]])) {
header_dataset[row, header] <- TRUE
}
}
invisible(header_dataset)
}
t_read_textfiles <- function(
file_list,
begin = NA,  # name of file to start with
end = NA) {  # name of file to end with
# ATTENTION
# The filenames given in 'begin' and 'end' enclose all
# filenames of the ascending sorted file_list.
file_list <- sort(file_list,
decreasing = FALSE,
na.last = NA)
if (!is.na(begin) & !is.na(end)) {
begin <- which(basename(file_list) == begin)
end <- which(basename(file_list) == end)
file_list <- file_list[begin:end]
}
for (file in file_list) {
# If the dataset does not exist create it
if (!exists("dataset")) {
dataset <- read.table(
file,
header = TRUE,
sep = ",",
col.names = c("Date",
"Sulfate",
"Nitrate",
"ID"),
stringsAsFactors = FALSE
)
# If the dataset exists append to it
} else {
temp <- read.table(
file,
header = FALSE,
sep = ",",
col.names = c("Date",
"Sulfate",
"Nitrate",
"ID"),
stringsAsFactors = FALSE
)
dataset <- rbind(dataset, temp)
rm(temp)
}
}
dataset[ , "Sulfate"] <- as.numeric(dataset[ , "Sulfate"])
dataset[ , "Nitrate"] <- as.numeric(dataset[ , "Nitrate"])
dataset[ , "ID"] <- as.numeric(dataset[ , "ID"])
invisible(dataset)
}
pollutantmean <- function(directory,
pollutant,
begin,
end) {
file_list <- t_create_file_list(directory = directory)
dataset <- t_read_textfiles(file_list = file_list,
begin = begin,
end = end)
result <- mean(dataset[ , pollutant], na.rm = TRUE)
invisible(result)
}
# EOF .
pollutantmean(directory = work_dir, pollutant = "sulfate", begin = "001.csv", end = "010.csv")
pollutantmean(directory = work_dir, pollutant = sulfate, begin = "001.csv", end = "010.csv")
pollutantmean(directory = work_dir, pollutant = "Sulfate", begin = "001.csv", end = "010.csv")
?list.files
# datasciencecoursera
# Course: Programming with R
# Week 2: Programming Assignemnt
# Part 1
# Write a function named 'pollutantmean' that calculates
# the mean of a pollutant (sulfate or nitrate) across a
# specified list of monitors. The function 'pollutantmean'
# takes three arguments:'directory', 'pollutant', and 'id'.
# Given a vector monitor ID numbers, 'pollutantmean' reads
# that monitors' particulate matter data from the directory
# specified in the 'directory' argument and returns the mean
# of the pollutant across all of the monitors, ignoring any
# missing values coded as NA. A prototype of the function is
# as follows:
#
# pollutantmean <- function(directory,
#                           pollutant,
#                           id = 1:332) {
#   # 'directory' is a character vector of length 1 indicating
#   # the location of the csv files.
#
#   # 'pollutant' is a character vector of length 1 indicating
#   # the name of the pollutant for which we will calculate
#   # the mean; either 'sulfate' or 'nitrate'.
#
#   # 'id' is an integer vector indicating the monitor ID
#   # numbers to be used.
#
#   # Return the mean of the pollutant across all monitors
#   # list in the 'ID' vector (ignoring NA values).
#   # Note: Do not round the result!
#
#
# }
work_dir <- "C:/Users/maubach.WEIN_WOLF/Desktop/temp/Documents/datasciencecoursera/Data/specdata"
t_create_file_list <- function(directory,
id = 1:332) {
saved_workdir <- getwd()
setwd(directory)
ids = id
file_list <- paste0(sprintf("%03d", id), ".csv")
dataset <- data.frame()
for (file in file_list)
{
csv_file <- read.csv(
file.path(
directory,
file),
header = TRUE)
dataset <- rbind(dataset, csv_file)
}
result <- mean(dataset[[pollutant]], na.rm = TRUE)
setwd(saved_workdir)
return(result)
}
pollutantmean(directory = work_dir, pollutant = "sulfate", id = 1:2)
# datasciencecoursera
# Course: Programming with R
# Week 2: Programming Assignemnt
# Part 1
# Write a function named 'pollutantmean' that calculates
# the mean of a pollutant (sulfate or nitrate) across a
# specified list of monitors. The function 'pollutantmean'
# takes three arguments:'directory', 'pollutant', and 'id'.
# Given a vector monitor ID numbers, 'pollutantmean' reads
# that monitors' particulate matter data from the directory
# specified in the 'directory' argument and returns the mean
# of the pollutant across all of the monitors, ignoring any
# missing values coded as NA. A prototype of the function is
# as follows:
#
# pollutantmean <- function(directory,
#                           pollutant,
#                           id = 1:332) {
#   # 'directory' is a character vector of length 1 indicating
#   # the location of the csv files.
#
#   # 'pollutant' is a character vector of length 1 indicating
#   # the name of the pollutant for which we will calculate
#   # the mean; either 'sulfate' or 'nitrate'.
#
#   # 'id' is an integer vector indicating the monitor ID
#   # numbers to be used.
#
#   # Return the mean of the pollutant across all monitors
#   # list in the 'ID' vector (ignoring NA values).
#   # Note: Do not round the result!
#
#
# }
work_dir <- "C:/Users/maubach.WEIN_WOLF/Desktop/temp/Documents/datasciencecoursera/Data/specdata"
pollutantmean <- function(directory,
pollutant,
id = 1:332) {
saved_workdir <- getwd()
setwd(directory)
ids = id
file_list <- paste0(sprintf("%03d", ids), ".csv")
dataset <- data.frame()
for (file in file_list)
{
csv_file <- read.csv(
file.path(
directory,
file),
header = TRUE)
dataset <- rbind(dataset, csv_file)
}
result <- mean(dataset[[pollutant]], na.rm = TRUE)
setwd(saved_workdir)
return(result)
}
pollutantmean(directory = work_dir, pollutant = "sulfate", id = 1:2)
pollutantmean(directory = work_dir, pollutant = "sulfate", id = 1)
pollutantmean(directory = work_dir, pollutant = "sulfate", id = 1:10)
pollutantmean(directory = work_dir, pollutant = "nitrate", id = 70:72)
pollutantmean(directory = work_dir, pollutant = "sulfate", id = 34)
pollutantmean(directory = work_dir, pollutant = "nitrate")
pollutantmean(directory = work_dir, c(10, 20, 34, 100, 200, 310))
cc <- complete(directory = work_dir, ids = c(6, 10, 20, 34, 100, 200, 310))
print(cc)
cc <- complete(directory = work_dir, ids = c(54))
print(cc)
set.seed(42)
cc <- complete(directory = work_dir, ids = 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr(directory = work_dir)
# datasciencecoursera
# Course: Programming with R
# Week 2: Programming Assignemnt
# Part 3
# Write a function that takes a directory of data files and
# a threshold for complete cases and calculates the
# correlation between sulfate and nitrate for monitor
# locations where the number of completely observed cases
# (on all variables) is greater than the threshold. The
# function should return a vector of correlations for the
# monitors that meet the threshold requirement. If no
# monitors meet the threshold requirement, then the function
# should return a numeric vector of length 0. A prototype of
# this function follows
# corr <- function(directory,
#                 threshold = 0) {
#   # 'directory' is a character vector of length 1 indicating
#   # the location of the csv files.
#   #
#   # 'threshold' is a numeric vector of length 1 indicating
#   # the number of completely observed observations (on all
#   # variables) required to compute the correlation between
#   # nitrate and sulfate; the default is 0.
#   #
#   # Return a numeric vector of correlations.
#   #
#   # Note: Do not round the result!
# }
#
# Please read '?cor' as this function is needed to fulfil
# this programming assignment.
source(file.path("C:/Users/maubach.WEIN_WOLF/Desktop",
"temp/Documents/datasciencecoursera",
"Programs",
"complete.R"))
corr <- function(directory, threshold = 0)
{
complete_cases <- complete(directory)
complete_cases_with_threshold <- complete_cases[
complete_cases[["nobs"]] > threshold ,]
saved_workdir <- getwd()
setwd(directory)
corr_results <- numeric()
for (id in complete_cases_with_threshold$id)
{
dataset <- read.csv(
file = paste0(sprintf("%03d", id), ".csv"),
header = TRUE
)
result <- cor(x = dataset$sulfate,
y = dataset$nitrate,
use = "pairwise.complete.obs")
corr_results <- c(corr_results, result)
}
setwd(saved_workdir)
return(corr_results)
}
cr <- corr(directory = work_dir)
cr
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr(directory = work_dir, threshold = 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr(directory = work_dir, 2000)
n <- length(cr)
cr <- corr(directory = work_dir, 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
library(datasets)
data(iris)
?irsi
?iris
str(iris)
mean(iris[iris$Species == "virginica" , "Sepal.Length"], na.rm = TRUE)
library(datasets)
data(cars)
?mtcars
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364 - 15.1000
tapply(mtcars$hp, mtcars$cyl, mean)
result <- tapply(mtcars$hp, mtcars$cyl, mean)
str(result)
result["4"] - result["8"]
