} else
{
stop("Given unknow rank specification in 'num'!")
}
} else if (is.numeric(num))
{
num_new <- num
} else
{
stop("Argument 'num' neither 'character' nor 'numeric'!")
}
print(paste("num_new", num_new))
d_ordered$num <- 1:nrow(d_ordered)
return(d_ordered[num_new , ])
}
#----------------------------------------------------------
rankhospital(state = "NC",
outcome = "heart attack",
num = "worst")
library(excel.link)
#----------------------------------------------------------
rankhospital <- function(dataset = d_measures_3,
state = "AL",
outcome = "heart attack",
num = "best")
{
## Data is read outside the function to avoid multiple data loading.
## Dataset is an argument.
# print(head(dataset, n = 3))
## Checks
### Check state
state_list <- unique(dataset$state)
# print(state_list)
state_in_list <- state %in% state_list
# print(paste("State in List", state_in_list))
if (!state_in_list) stop("invalid state")
### Check outcome
outcome_list <- unique(dataset$outcome)
outcome_in_list <- outcome %in% outcome_list
if (!outcome_in_list) stop("invalid outcome")
d_subset <- dataset[dataset["state"] == state &
dataset["outcome"] == outcome , ]
print(paste("nrow: ", nrow(d_subset), "n_col: ", ncol(d_subset)))
View(d_subset)
d_complete <- d_subset[complete.cases(d_subset) , ]
View(d_complete)
browser()
v_order <- order(d_complete[ , c("measure", "hospital")])
print(paste("v_order: ", v_order))
d_ordered <- d_complete[v_order , ]
View(d_ordered)
# Transform 'num'
if (is.character(num))
{
if (num == "best")
{
num_new <- 1
} else if (num == "worst")
{
num_new <- nrow(d_ordered)
} else
{
stop("Given unknow rank specification in 'num'!")
}
} else if (is.numeric(num))
{
num_new <- num
} else
{
stop("Argument 'num' neither 'character' nor 'numeric'!")
}
print(paste("num_new", num_new))
d_ready$num <- 1:nrow(d_ordered)
return(d_ready[num_new , ])
}
#----------------------------------------------------------
rankhospital(state = "NC",
outcome = "heart attack",
num = "worst")
order(c_complete[c("measure", "hospital")])
order(d_complete[c("measure", "hospital")])
unique(order(d_complete[c("measure", "hospital")]))
length(unique(order(d_complete[c("measure", "hospital")])))
v_order <- order(d_complete["measure"],d_complete["hospital"])
library(excel.link)
#----------------------------------------------------------
rankhospital <- function(dataset = d_measures_3,
state = "AL",
outcome = "heart attack",
num = "best")
{
## Data is read outside the function to avoid multiple data loading.
## Dataset is an argument.
# print(head(dataset, n = 3))
## Checks
### Check state
state_list <- unique(dataset$state)
# print(state_list)
state_in_list <- state %in% state_list
# print(paste("State in List", state_in_list))
if (!state_in_list) stop("invalid state")
### Check outcome
outcome_list <- unique(dataset$outcome)
outcome_in_list <- outcome %in% outcome_list
if (!outcome_in_list) stop("invalid outcome")
d_subset <- dataset[dataset["state"] == state &
dataset["outcome"] == outcome , ]
print(paste("nrow: ", nrow(d_subset), "n_col: ", ncol(d_subset)))
View(d_subset)
d_complete <- d_subset[complete.cases(d_subset) , ]
View(d_complete)
browser()
v_order <- order(d_complete["measure"],d_complete["hospital"])
print(paste("v_order: ", v_order))
d_ordered <- d_complete[v_order , ]
View(d_ordered)
# Transform 'num'
if (is.character(num))
{
if (num == "best")
{
num_new <- 1
} else if (num == "worst")
{
num_new <- nrow(d_ordered)
} else
{
stop("Given unknow rank specification in 'num'!")
}
} else if (is.numeric(num))
{
num_new <- num
} else
{
stop("Argument 'num' neither 'character' nor 'numeric'!")
}
print(paste("num_new", num_new))
d_ready$num <- 1:nrow(d_ordered)
return(d_ready[num_new , ])
}
#----------------------------------------------------------
rankhospital(state = "NC",
outcome = "heart attack",
num = "worst")
library(excel.link)
#----------------------------------------------------------
rankhospital <- function(dataset = d_measures_3,
state = "AL",
outcome = "heart attack",
num = "best")
{
## Data is read outside the function to avoid multiple data loading.
## Dataset is an argument.
# print(head(dataset, n = 3))
## Checks
### Check state
state_list <- unique(dataset$state)
# print(state_list)
state_in_list <- state %in% state_list
# print(paste("State in List", state_in_list))
if (!state_in_list) stop("invalid state")
### Check outcome
outcome_list <- unique(dataset$outcome)
outcome_in_list <- outcome %in% outcome_list
if (!outcome_in_list) stop("invalid outcome")
d_subset <- dataset[dataset["state"] == state &
dataset["outcome"] == outcome , ]
print(paste("nrow: ", nrow(d_subset), "n_col: ", ncol(d_subset)))
View(d_subset)
d_complete <- d_subset[complete.cases(d_subset) , ]
View(d_complete)
browser()
v_order <- order(d_complete["measure"],d_complete["hospital"])
print(paste("v_order: ", v_order))
d_ordered <- d_complete[v_order , ]
View(d_ordered)
# Transform 'num'
if (is.character(num))
{
if (num == "best")
{
num_new <- 1
} else if (num == "worst")
{
num_new <- nrow(d_ordered)
} else
{
stop("Given unknow rank specification in 'num'!")
}
} else if (is.numeric(num))
{
num_new <- num
} else
{
stop("Argument 'num' neither 'character' nor 'numeric'!")
}
print(paste("num_new", num_new))
d_ready <- d_ordered
d_ready$num <- 1:nrow(d_ordered)
return(d_ready[num_new , ])
}
#----------------------------------------------------------
rankhospital(state = "NC",
outcome = "heart attack",
num = "worst")
rankhospital(state = "WA",
outcome = "heart attack",
num = 7)
library(excel.link)
#----------------------------------------------------------
rankhospital <- function(dataset = d_measures_3,
state = "AL",
outcome = "heart attack",
num = "best")
{
## Data is read outside the function to avoid multiple data loading.
## Dataset is an argument.
# print(head(dataset, n = 3))
## Checks
### Check state
state_list <- unique(dataset$state)
# print(state_list)
state_in_list <- state %in% state_list
# print(paste("State in List", state_in_list))
if (!state_in_list) stop("invalid state")
### Check outcome
outcome_list <- unique(dataset$outcome)
outcome_in_list <- outcome %in% outcome_list
if (!outcome_in_list) stop("invalid outcome")
d_subset <- dataset[dataset["state"] == state &
dataset["outcome"] == outcome , ]
print(paste("nrow: ", nrow(d_subset), "n_col: ", ncol(d_subset)))
View(d_subset)
d_complete <- d_subset[complete.cases(d_subset) , ]
View(d_complete)
v_order <- order(d_complete["measure"],d_complete["hospital"])
print(paste("v_order: ", v_order))
d_ordered <- d_complete[v_order , ]
View(d_ordered)
# Transform 'num'
if (is.character(num))
{
if (num == "best")
{
num_new <- 1
} else if (num == "worst")
{
num_new <- nrow(d_ordered)
} else
{
stop("Given unknow rank specification in 'num'!")
}
} else if (is.numeric(num))
{
num_new <- num
} else
{
stop("Argument 'num' neither 'character' nor 'numeric'!")
}
print(paste("num_new", num_new))
d_ready <- d_ordered
d_ready$num <- 1:nrow(d_ordered)
return(d_ready[num_new , ])
}
#----------------------------------------------------------
rankhospital(state = "NC",
outcome = "heart attack",
num = "worst")
rankhospital(state = "WA",
outcome = "heart attack",
num = 7)
library(excel.link)
#----------------------------------------------------------
rankhospital <- function(dataset = d_measures_3,
state = "AL",
outcome = "heart attack",
num = "best")
{
## Data is read outside the function to avoid multiple data loading.
## Dataset is an argument.
# print(head(dataset, n = 3))
## Checks
### Check state
state_list <- unique(dataset$state)
# print(state_list)
state_in_list <- state %in% state_list
# print(paste("State in List", state_in_list))
if (!state_in_list) stop("invalid state")
### Check outcome
outcome_list <- unique(dataset$outcome)
outcome_in_list <- outcome %in% outcome_list
if (!outcome_in_list) stop("invalid outcome")
d_subset <- dataset[dataset["state"] == state &
dataset["outcome"] == outcome , ]
print(paste("nrow: ", nrow(d_subset), "n_col: ", ncol(d_subset)))
# View(d_subset)
d_complete <- d_subset[complete.cases(d_subset) , ]
# View(d_complete)
v_order <- order(d_complete["measure"],d_complete["hospital"])
d_ordered <- d_complete[v_order , ]
# View(d_ordered)
# Transform 'num'
if (is.character(num))
{
if (num == "best")
{
num_new <- 1
} else if (num == "worst")
{
num_new <- nrow(d_ordered)
} else
{
stop("Given unknow rank specification in 'num'!")
}
} else if (is.numeric(num))
{
num_new <- num
} else
{
stop("Argument 'num' neither 'character' nor 'numeric'!")
}
print(paste("num_new", num_new))
d_ready <- d_ordered
d_ready$num <- 1:nrow(d_ordered)
return(d_ready[num_new , ])
}
#----------------------------------------------------------
rankhospital(state = "NC",
outcome = "heart attack",
num = "worst")
rankhospital(state = "WA",
outcome = "heart attack",
num = 7)
rankhospital(state = "TX",
outcome = "pneumonia",
num = 10)
rankhospital(state = "NY",
outcome = "heart attack",
num = 7)
get_row <- function(dataset,
num)
{
return(0)
}
rankall <- function(outcome,
num = "best")
{
## Data is read outside the function to avoid multiple data loading.
## Dataset is an argument.
# print(head(dataset, n = 3))
## Checks
### Check outcome
outcome_list <- unique(dataset$outcome)
outcome_in_list <- outcome %in% outcome_list
if (!outcome_in_list) stop("invalid outcome")
d_ordered <- dataset[
order(dataset["state"],
dataset["outcome"],
dataset["measure"],
dataset["hospital"])]
d_split <- split(d_ordered, d_ordered["state"])
browser()
# Transform 'num'
if (is.character(num))
{
if (num == "best")
{
num_new <- 1
} else if (num == "worst")
{
num_new <- nrow(d_ordered)
} else
{
stop("Given unknown rank specification in 'num'!")
}
} else if (is.numeric(num))
{
num_new <- num
} else
{
stop("Argument 'num' neither 'character' nor 'numeric'!")
}
print(paste("num_new", num_new))
}
#----------------------------------------------------------
rankall("heart attack", 4)
#----------------------------------------------------------
get_row <- function(dataset,
num)
{
return(0)
}
rankall <- function(dataset = d_measures_3,
outcome,
num = "best")
{
## Data is read outside the function to avoid multiple data loading.
## Dataset is an argument.
# print(head(dataset, n = 3))
## Checks
### Check outcome
outcome_list <- unique(dataset$outcome)
outcome_in_list <- outcome %in% outcome_list
if (!outcome_in_list) stop("invalid outcome")
d_ordered <- dataset[
order(dataset["state"],
dataset["outcome"],
dataset["measure"],
dataset["hospital"])]
d_split <- split(d_ordered, d_ordered["state"])
browser()
# Transform 'num'
if (is.character(num))
{
if (num == "best")
{
num_new <- 1
} else if (num == "worst")
{
num_new <- nrow(d_ordered)
} else
{
stop("Given unknown rank specification in 'num'!")
}
} else if (is.numeric(num))
{
num_new <- num
} else
{
stop("Argument 'num' neither 'character' nor 'numeric'!")
}
print(paste("num_new", num_new))
}
#----------------------------------------------------------
rankall(outcome = "heart attack", num = 4)
#----------------------------------------------------------
get_row <- function(dataset,
num)
{
return(0)
}
rankall <- function(dataset = d_measures_3,
outcome,
num = "best")
{
## Data is read outside the function to avoid multiple data loading.
## Dataset is an argument.
# print(head(dataset, n = 3))
## Checks
### Check outcome
outcome_list <- unique(dataset$outcome)
outcome_in_list <- outcome %in% outcome_list
if (!outcome_in_list) stop("invalid outcome")
d_ordered <- dataset[
order(dataset["state"],
dataset["outcome"],
dataset["measure"],
dataset["hospital"]) , ]
d_split <- split(d_ordered, d_ordered["state"])
browser()
# Transform 'num'
if (is.character(num))
{
if (num == "best")
{
num_new <- 1
} else if (num == "worst")
{
num_new <- nrow(d_ordered)
} else
{
stop("Given unknown rank specification in 'num'!")
}
} else if (is.numeric(num))
{
num_new <- num
} else
{
stop("Argument 'num' neither 'character' nor 'numeric'!")
}
print(paste("num_new", num_new))
}
#----------------------------------------------------------
rankall(outcome = "heart attack", num = 4)
#----------------------------------------------------------
head(d_split)
str(d_split)
source("clean_data.R")
prog_dir <- "N:/2016/repos_2016/datasciencecoursera/Exams/Programming_Assignment3/programs"
source(file.path(prog_dir,"clean_data.R"))
rm(list = ls())
prog_dir <- "N:/2016/repos_2016/datasciencecoursera/Exams/Programming_Assignment3/programs"
source(file.path(prog_dir,"clean_data.R"))
source(file.path(prog_dir, "best.R"))
source(file.path(prog_dir, "rankhospital"))
source(file.path(prog_dir, "rankhospital.R"))
best(state = "SC", outcome = "heart attack")
best(state = "NY", outcome = "pneumonia")
best(state = "AK", outcome = "pneumonia")
rankhospital(state = "NC", outcome = "heart attack", num = "worst")
rankhospital(state = "WA", outcome = "heart attack", num = 7)
rankhospital(state = "TX", outcome = "pneumonia", num = 10)
rankhospital(state = "NY", outcome = "heart attack", num = 7)
dataset <- d_measures_3
d_ordered <- dataset[
order(dataset["state"],
dataset["outcome"],
dataset["measure"],
dataset["hospital"]) , ]
l_split <- split(d_ordered, d_ordered$state)
test <- lapply(l_split, function() {print()})
View(dataset)
