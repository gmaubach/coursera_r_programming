x <- data.frame(foo = 1:4, bar = c(TRUE, TRUE, FALSE, FALSE))
print(x)
nrow(x)
ncol(x)
# Chunk 14
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
print(x)
names(x)
# Chunk 15
x <- list(a = 1, b = 2, c = 3)
print(x)
# Chunk 16
?read.table
# Chunk 17
saved_working_dir <- getwd()
setwd(dir = "N:/2016/repos_2016/datasciencecoursera")
init_tab <- read.table(file = "datatable.txt", nrows = 100)
classes <- sapply(init_tab, class)
total_tab <- read.table(file = "datatable.txt", colClasses = classes)
setwd(saved_working_dir)
# Chunk 18
y <- data.frame(a = 1, b = 2)
dput(y, file = "y.R")
new_y <- dget(file = "y.R")
new_y
# Chunk 19
x <- "foo"
y <- data.frame(a = 1, b = 2)
dump(c("x", "y"), file = "data.R")
rm(x, y)
source("data.R")
print(x)
print(y)
# Chunk 20
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
# Chunk 21
x <- c("a", "b", "c", "d", "e")
message("Commands return character vector due to the class of the original object")
x[1]
class(x[1])
x[1:4]
class(x[1:4])
# Chunk 22
x <- c("a", "b", "c", "d", "e")
message("R has a lexical ordering that makes it possible to use logical operators")
x[x > "a"]
x <- list(foo = 1:4, bar = 0.6)
x[1]
message("x is list therefore x[1] is also a list")
class(x[1])
x <- list(foo = 1:4, bar = 0.6)
x[1]
message("x is list therefore x[1] is also a list")
class(x[1])
x <- list(foo = 1:4, bar = 0.6)
x[1]
message("x is list therefore x[1] is also a list")
class(x[1])
x[[1]]
message("x is list but x[[1]] returns the elements as a sequence or vector")
class(x[[1]])
x <- list(foo = 1:4, bar = 0.6)
x[1]
message("x is list therefore x[1] is also a list")
class(x[1])
x[[1]]
message("x is list but x[[1]] returns the elements as a sequence or vector, in this case of class integer")
class(x[[1]])
x$foo
class(x$foo)
x <- list(foo = 1:4, bar = 0.6)
x[1]
message("x is list therefore x[1] is also a list")
class(x[1])
x[[1]]
message("x is list but x[[1]] returns the elements as a sequence or vector, in this case of class integer")
class(x[[1]])
x$foo
message("x$foo extracts the elememts just as [[ ]] do")
class(x$foo)
x[2]
message("x[2] returns a list cause x is a list")
class(x[2])
x["bar"]
message("x['bar'] returns a list cause x is a list. It does not matter if the object is subsetted using a numeric index or a name as index")
x <- list(foo = 1:4, bar = 0.6)
x[1]
message("x is list therefore x[1] is also a list")
class(x[1])
x[[1]]
message("x is list but x[[1]] returns the elements as a sequence or vector, in this case of class integer")
class(x[[1]])
x$foo
message("x$foo extracts the elememts just as [[ ]] do")
class(x$foo)
x[2]
message("x[2] returns a list cause x is a list")
class(x[2])
x["bar"]
message("x['bar'] returns a list cause x is a list. It does not matter if the object is subsetted using a numeric index or a name as index")
x$bar
message("x$bar extracts the element of 'bar' and returns it as a value")
class(x$bar)
x[["bar"]]
message("x[['bar']] extracts the element just as x$bar does")
class(x[["bar"]])
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1, 3)]
class(x[c(1, 3)])
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
message("Variable containing the name 'foo'")
name <- "foo"
message("Using computed index for foo")
x[[name]]
message("Be aware that the computed values is given without quotation marks")
message("There is no element called 'name' in x")
x$name
message("The element foo does exist")
x$foo
x <- list(a = list(10, 12, 14),
b = list(3.14, 2,81))
message("Getting the element '14' of the first list within a list")
x[[[1]][[3]]
class(x[[[1]][[3]])
x <- list(a = list(10, 12, 14),
b = list(3.14, 2,81))
x[[1]][[3]]
x <- list(a = list(10, 12, 14),
b = list(3.14, 2,81))
message("Getting the element '14' of the first list within a list")
x[[1]][[3]]
class(x[[[1]][[3]])
x <- list(a = list(10, 12, 14),
b = list(3.14, 2,81))
message("Getting the element '14' of the first list within a list")
x[[1]][[3]]
class(x[[1]][[3]])
x <- list(a = list(10, 12, 14),
b = list(3.14, 2,81))
message("Getting the element '14' of the first list within a list")
x[[1]][[3]]
class(x[[1]][[3]])
message("Getting the element '14' using a vector with index values")
x[[c(1, 3)]]
class(x[[c(1, 3)]])
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
message("Remember: matrices are filled column wise")
m
message("Get element '3'")
m[2, 3]
message("Attention: Matrices are subsetted using index values without the need to use a vector as was the case when subsetting nested lists")#
message("The next command gets the whole column number 1 cause the index ")
m[1 , ]
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
message("Remember: matrices are filled column wise")
m
message("Get element '3'")
m[1, 2]
message("Attention: Matrices are subsetted using index values without the need to use a vector as was the case when subsetting nested lists")#
message("The next command gets the whole column number 1 cause the index ")
m[1 , ]
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
message("Remember: matrices are filled column wise")
m
message("Get element '3'")
m[1, 2]
message("Attention: Matrices are subsetted using index values without the need to use a vector as was the case when subsetting nested lists")#
message("The next command gets the whole row number 1 cause the index for the column is missing")
m[1 , ]
message("The next command gets the whole column number 2 cause the index for the row is missing")
m[ , 2]
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
message("Remember: matrices are filled column wise")
m
message("Get element '3'")
m[1, 2]
message("Attention: Matrices are subsetted using index values without the need to use a vector as was the case when subsetting nested lists")#
message("The next command gets the whole row number 1 cause the index for the column is missing")
m[1 , ]
message("The next command gets the whole column number 2 cause the index for the row is missing")
m[ , 2]
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
message("The following command extracts the value '3' and returns it as a vector rather as an object of class matrix. This is an unexpected behaviour.")
m[1, 2]
class(m[1, 2])
message("To get a matrix with the single element '3' in it you have to use the argument 'drop = FALSE'")
m[1, 2, drop = FALSE]
class(m[1, 2, drop = FALSE])
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, cache = FALSE)
# Chunk 2
1 / 0
1 / Inf
# Chunk 3
0 / 0
# Chunk 4
x <- list(number_one = 1.0)
x
attributes(x)
# Chunk 5
x <- c(0.5, 0.6)  # vector with two entries of type numeric
x
x <- c(TRUE, FALSE)  # vector with two entries of type logical
x
x <- c("a", "b", "c")  # vector with two entries of type character
x
# Chunk 6
x <- vector("numeric", length = 10)
x
# Chunk 7
y <- c(1.7, "a")  # character
y
y <- c(TRUE, 2)  # numeric
y
y <- c("a", TRUE)  # character
# Chunk 8
x <- 0:6
class(x)
x <- as.numeric(x)
class(x)
x
x <- as.logical(x)
class(x)
x  # Be aware that all figures >= 1 are coerced to TRUE
x <- as.character(x)
class(x)
x
# Chunk 9
x <- c("a", "b", "c")
x <- as.numeric(x)
x
# Chunk 10
x <- list(1, "a", TRUE, 1 + 4i)
x
# Chunk 11
m <- matrix(nrow = 2, ncol = 3)  # empty matrix filled initially with NA
m
m <- matrix(1:6, nrow = 2, ncol = 3)  # filled matrix columnwise
m
m <- 1:10  # creating a vector
m
dim(m) <- c(2,5)  # adding an attribute to define rows and columns
m
x <- 1:3
y <- 10:12
cbind(x, y)  # columnwise binding of vectors to create a matrix
rbind(x, y)  # rowwise binding of vectors to create a matrix
# Chunk 12
x <- c(1, 2, NA, 4, 5)
is.na(x)
y <- c(1, 2, NA, NaN, 5)
is.na(y)   # shows "na" AND "nan" as "na"
is.nan(y)  # shows ONLY "nan" as "nan"
# Chunk 13
x <- data.frame(foo = 1:4, bar = c(TRUE, TRUE, FALSE, FALSE))
print(x)
nrow(x)
ncol(x)
# Chunk 14
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
print(x)
names(x)
# Chunk 15
x <- list(a = 1, b = 2, c = 3)
print(x)
# Chunk 16
?read.table
# Chunk 17
saved_working_dir <- getwd()
setwd(dir = "N:/2016/repos_2016/datasciencecoursera")
init_tab <- read.table(file = "datatable.txt", nrows = 100)
classes <- sapply(init_tab, class)
total_tab <- read.table(file = "datatable.txt", colClasses = classes)
setwd(saved_working_dir)
# Chunk 18
y <- data.frame(a = 1, b = 2)
dput(y, file = "y.R")
new_y <- dget(file = "y.R")
new_y
# Chunk 19
x <- "foo"
y <- data.frame(a = 1, b = 2)
dump(c("x", "y"), file = "data.R")
rm(x, y)
source("data.R")
print(x)
print(y)
# Chunk 20
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
# Chunk 21
x <- c("a", "b", "c", "d", "e")
message("Commands return character vector due to the class of the original object")
x[1]
class(x[1])
x[1:4]
class(x[1:4])
# Chunk 22
x <- c("a", "b", "c", "d", "e")
message("R has a lexical ordering that makes it possible to use logical operators")
x[x > "a"]
# Chunk 23
# x <- c("a", "b", "c", "d", "e")
message("Create a logical vector using subsetting")
logical_vector <- x > "a"
print(logical_vector)
message("Use a logical_vector to subset another vector")
x[logical_vector]
message("Using logical indexes all elements are elected that are marked with TRUE")
```
# Chunk 24
x <- list(foo = 1:4, bar = 0.6)
x[1]
message("x is list therefore x[1] is also a list")
class(x[1])
x[[1]]
message("x is list but x[[1]] returns the elements as a sequence or vector, in this case of class integer")
class(x[[1]])
x$foo
message("x$foo extracts the elememts just as [[ ]] do")
class(x$foo)
x[2]
message("x[2] returns a list cause x is a list")
class(x[2])
x["bar"]
message("x['bar'] returns a list cause x is a list. It does not matter if the object is subsetted using a numeric index or a name as index")
x$bar
message("x$bar extracts the element of 'bar' and returns it as a value")
class(x$bar)
x[["bar"]]
message("x[['bar']] extracts the element just as x$bar does")
class(x[["bar"]])
# Chunk 25
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1, 3)]
class(x[c(1, 3)])
```
## Subsetting with [] or [[ ]] using computed values
* The "[ ]" or "[[ ]]" operator can be used with computed indices.
* The "$" operator can only be used with literal names that are part of a list.
# Chunk 26
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
message("Variable containing the name 'foo'")
name <- "foo"
message("Using computed index for foo")
x[[name]]
message("Be aware that the computed values is given without quotation marks")
message("There is no element called 'name' in x")
x$name
message("The element foo does exist")
x$foo
```
## Subsetting elements in nested lists
* Nested lists are lists which contain other lists. These objest are called nested.
* Nested lists can be subsetted using double indices or vectors.
* Example
# Chunk 27
x <- list(a = list(10, 12, 14),
b = list(3.14, 2,81))
message("Getting the element '14' of the first list within a list")
x[[1]][[3]]
class(x[[1]][[3]])
message("Getting the element '14' using a vector with index values")
x[[c(1, 3)]]
class(x[[c(1, 3)]])
# Chunk 28
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
message("Remember: matrices are filled column wise")
m
message("Get element '3'")
m[1, 2]
message("Be aware that matrices are subsetted using index values without the need to use a vector as was the case when subsetting nested lists")#
message("The next command gets the whole row number 1 cause the index for the column is missing")
m[1 , ]
message("The next command gets the whole column number 2 cause the index for the row is missing")
m[ , 2]
message("Be aware that the output of the column 2 is printed on one line and not given in a column although it is column in the matrix object")
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
x[ , 2, drop = FALSE]
class(x[ , 2, drop = FALSE])
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
x[ , 2, drop = FALSE]
class(x[ , 2, drop = FALSE])
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
print(m)
x[ , 2, drop = FALSE]
class(x[ , 2, drop = FALSE])
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
print(m)
x[1, , drop = FALSE]
class(x[ , 2, drop = FALSE])
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
print(m)
x[1, 2, drop = FALSE]
class(x[ , 2, drop = FALSE])
m <- matrix(data = 1:6, nrow = 2, ncol = 3)
print(m)
m[ , 2, drop = FALSE]
class(m[ , 2, drop = FALSE])
x <- list(asterix = 1:6, bella = 1:5, bello = 1:10)
x$a  # is totally fine
x[["a"]]  # does not work cause there is not element named "a"
x[["a", exact = FALSE]]  # turn of the default behaviour of exact matching and does partial matching
x$b
x <- c(1, 2, NA, 4, NA, 5, NA, 7)
bad <- is.na(x)
# bad is logical vector telling where the elements are missing
bad
# To get the values that are good not bad you need to reverse the vector bad using the "!" = NOT operator
x[!bad]  # or
good <- !bad
x[good]
x <- c(1, 2, NA, 4, NA, 5, NA, 7)
y <- c("a", NA, "c", "d", NA, "f", "g")
good <- complete.cases(x, y)
print(good)
x[good]
y[good]
x <- c( 1,  2,  NA,  4,   NA,  5,  NA, 7)
y <- c("a", NA, "c", "d", NA, "f", "g", "h")
good <- complete.cases(x, y)
print(good)
x[good]
y[good]
airquality[1:6 , ]
good <- complete.cases(airquality)
airquality[good , ][1:6 , ]
x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
x
y
x * y    # element wise multiplaction element wise
x %*% y  # true matrix multiplaction
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
class(cbind(x, y)
)
read.table(file = "N:/2016/repos_2016/datasciencecoursera/2016-10-03_Coursera_Data-Science_Programming-R_Week-1_quiz1_data/hw1_data.csv)
")
read.table(file = "N:/2016/repos_2016/datasciencecoursera/2016-10-03_Coursera_Data-Science_Programming-R_Week-1_quiz1_data/hw1_data.csv")
read.csv(file = "N:/2016/repos_2016/datasciencecoursera/2016-10-03_Coursera_Data-Science_Programming-R_Week-1_quiz1_data/hw1_data.csv")
ds <- read.csv(file = "N:/2016/repos_2016/datasciencecoursera/2016-10-03_Coursera_Data-Science_Programming-R_Week-1_quiz1_data/hw1_data.csv")
ds
str(ds)
ds[2 , ]
ds[1:2 , ]
length(ds)
nrow(ds)
ncol(ds)
ds[151:153 , ]
ds[152:153 , ]
ds$Ozone[47]
ds[1, 47]
ds[47, 1]
is.na(ds$Ozone)
sum(is.na(ds$Ozone))
mean(ds$Ozone, na.rm = TRUE)
ds_susset_1 <- ds[ds$Ozone < 30 & ds$Temp < 90, ]
str(ds_susset_1)
ds_susset_1 <- ds[ds$Ozone > 30 & ds$Temp > 90, ]
str(ds_susset_1)
mean(ds_susset_1, na.rm = TRUE)
mean(ds_subset_1, na.rm = TRUE)
ds_subset_1 <- ds[ds$Ozone > 30 & ds$Temp > 90, ]
ds_subset_1 <- ds[ds$Ozone > 30 & ds$Temp > 90, ]
mean(ds_subset_1, na.rm = TRUE)
mean(ds_subset_1$Solar.R, na.rm = TRUE)
mean(ds[ds$Month == 6], na.rm = TRUE)
mean(ds[ds$Month == 6]$Temp, na.rm = TRUE)
str(ds)
table(ds$Month)
ds_subset_1 <- ds[ds$Month == 6 , ]
ds_subset_2 <- ds[ds$Month == 6 , ]
ds_subset_2
mean(ds_subset_2$Temp, na.rm = TRUE)
ds_subset_3 <- ds[ds$Month == 5, ]
mean(ds_subset_3)
max(ds_subset_3$Ozone, na.rm = TRUE)
x <- 1:4; y <- 2:3
x + y
class(x + y)
sum(is.na(ds$Ozone))
mean(ds$Ozone, na.rm = TRUE)
ds_subset_1 <- ds[ds$Ozone > 31 & ds$Temp > 90, ]
mean(ds_subset_1, na.rm = TRUE)
mean(ds_subset_1$Ozone, na.rm = TRUE)
mean(ds_subset_1$Solar.R, na.rm = TRUE)
x <- 1:4; y <- 2
x + y
class(x + y)
x <- 1:4; y <- 2:5
class(x + y)
tail(ds, 2)
?tail
tail(ds, n = 2)
sum(is.na(ds$Ozone))
mean(ds$Ozone, na.rm = TRUE)
ds_subset_1 <- ds[ds$Month == 6]
ds_subset_1 <- ds[ds$Month == 6, ]
mean(ds_subset_1$Temp)
x <- 1:4; y <- 2
class(x + y)
x <- 1:4; y <- 2:5
class(x + y)
savehistory("N:/2016/repos_2016/datasciencecoursera/2016-10-03_Coursera_Data-Science_Programming-R_Week-1_Quiz_Take-3_History.Rhistory")
